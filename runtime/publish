#!/usr/bin/env php -d memory_limit=-1
<?php

declare(strict_types=1);

/*
 * This file is part of Ymir PHP Runtime.
 *
 * (c) Carl Alexander <support@ymirapp.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Symfony\Component\Process\Process;
use Tightenco\Collect\Support\Collection;

require_once __DIR__.'/../vendor/autoload.php';

$layers = collect(json_decode(file_get_contents(__DIR__.'/layers.json'), true));
$profile = $argv[1] ?? null;
$regions = collect(json_decode(file_get_contents(__DIR__.'/regions.json'), true));

$layers->keys()->each(function (string $layer) {
    if (!file_exists(__DIR__."/../build/{$layer}.zip")) {
        throw new Exception("$layer archive does not exist");
    }
});

$publishingProcesses = collect([]);
$regions->each(function (string $region) use ($layers, $profile, $publishingProcesses) {
    $layers->each(function (string $description, $layer) use ($profile, $publishingProcesses, $region) {
        $command = ['aws',
            'lambda',
            'publish-layer-version',
            '--region', $region,
            '--layer-name',
            $layer,
            '--description',
            $description,
            '--license-info', 'MIT',
            '--zip-file',
            'fileb://'.__DIR__."/../build/$layer.zip",
            '--compatible-runtimes',
            'provided.al2',
            '--output',
            'text',
            '--query',
            'Version',
            '--cli-connect-timeout',
            '6000',
        ];

        if (!empty($profile)) {
            $command[] = '--profile';
            $command[] = $profile;
        }

        $process = new Process($command);
        $process->setTimeout(null);

        $publishingProcesses[$region.$layer] = $process;
    });
});
run($publishingProcesses);

$permissionProcesses = collect([]);
$regions->each(function (string $region) use ($layers, $permissionProcesses, $profile, $publishingProcesses) {
    $layers->keys()->each(function (string $layer) use ($permissionProcesses, $profile, $publishingProcesses, $region) {
        $command = [
            'aws',
            'lambda',
            'add-layer-version-permission',
            '--region',
            $region,
            '--layer-name',
            $layer,
            '--version-number',
            trim($publishingProcesses[$region.$layer]->getOutput()),
            '--statement-id',
            'public',
            '--action',
            'lambda:GetLayerVersion',
            '--principal',
            '*',
        ];

        if (!empty($profile)) {
            $command[] = '--profile';
            $command[] = $profile;
        }

        $process = new Process($command);
        $process->setTimeout(null);

        $permissionProcesses[] = $process;
    });
});
run($permissionProcesses);

/**
 * Run processes.
 */
function run(Collection $processes): void
{
    $processes->chunk(4)->each(function (Collection $chunkedProcesses) {
        $chunkedProcesses->each(function (Process $process) {
            echo 'Running: '.$process->getCommandLine().PHP_EOL;
            $process->start();
        })->each(function (Process $process) {
            $exitCode = $process->wait();

            if (0 !== $exitCode) {
                throw new \Exception($process->getErrorOutput());
            }
        });
    });
}
