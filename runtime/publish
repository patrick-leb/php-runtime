#!/usr/bin/env php -d memory_limit=-1
<?php

declare(strict_types=1);

/*
 * This file is part of Ymir PHP Runtime.
 *
 * (c) Carl Alexander <support@ymirapp.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Aws\Lambda\LambdaClient;
use Aws\Result;
use Aws\S3\S3Client;
use GuzzleHttp\Promise\Promise;

require_once __DIR__.'/../vendor/autoload.php';

$layers = collect(json_decode(file_get_contents(__DIR__.'/layers.json'), true));
$profile = $argv[1] ?? null;
$regions = collect(json_decode(file_get_contents(__DIR__.'/regions.json'), true));

$layers->keys()->each(function (string $layer) {
    if (!file_exists(__DIR__."/../build/{$layer}.zip")) {
        throw new Exception("$layer archive does not exist");
    }
});

foreach ($regions as $region) {
    $bucket = 'ymir-layer-'.time();
    $lambda = new LambdaClient([
        'profile' => $profile,
        'region' => $region,
        'version' => 'latest',
    ]);
    $s3 = new S3Client([
        'profile' => $profile,
        'region' => $region,
        'version' => 'latest',
    ]);

    $s3->createBucket([
        'Bucket' => $bucket,
    ]);

    $layers->keys()->map(function($layer) use ($bucket, $s3) {
        $file = "$layer.zip";

        return $s3->putObjectAsync([
            'Bucket' => $bucket,
            'Key' => $file,
            'SourceFile' => __DIR__."/../build/$file",
        ]);
    })->each(function(Promise $promise) {
        $promise->wait();
    });

    $results = $layers->map(function ($description, string $layer) use ($bucket, $lambda) {
            return $lambda->publishLayerVersionAsync([
                'CompatibleRuntimes' => ['provided.al2'],
                'LayerName' => $layer,
                'Description' => $description,
                'Content' => [
                    'S3Bucket' => $bucket,
                    'S3Key' => "$layer.zip",
                ],
            ]);
    })->map(function (Promise $promise) use ($region) {
        $result = $promise->wait();

        echo sprintf('[%s]: %s'.PHP_EOL, $region, $result->get('LayerVersionArn'));

        return $result;
    });

    $results->each(function (Result $response, string $layer) use ($lambda) {
        $lambda->addLayerVersionPermissionAsync([
            'Action' => 'lambda:GetLayerVersion',
            'LayerName' => $layer,
            'Principal' => '*',
            'StatementId' => (string) time(),
            'VersionNumber' => (string) $response->get('Version'),
        ]);
    });

    $layers->keys()->each(function (string $layer) use ($bucket, $s3) {
        $s3->deleteObject([
            'Bucket' => $bucket,
            'Key' => "$layer.zip",
        ]);
    });

    $s3->deleteBucket([
        'Bucket' => $bucket,
    ]);
}
